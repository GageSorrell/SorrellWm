"use strict";
exports.id = "Source_Main_MainWindow_ts";
exports.ids = ["Source_Main_MainWindow_ts"];
exports.modules = {

/***/ "./Source/Main/MainWindow.ts":
/*!***********************************!*\
  !*** ./Source/Main/MainWindow.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ "path");
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _sorrellwm_windows__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sorrellwm/windows */ "./Windows/index.js");
/* harmony import */ var _sorrellwm_windows__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_sorrellwm_windows__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! electron */ "electron");
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _Keyboard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Keyboard */ "./Source/Main/Keyboard.ts");
/* harmony import */ var _Core_Utility__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Core/Utility */ "./Source/Main/Core/Utility.ts");
/* harmony import */ var _Domain_Common_Component_Keyboard_Keyboard__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/Domain/Common/Component/Keyboard/Keyboard */ "./Source/Renderer/Domain/Common/Component/Keyboard/Keyboard.ts");
/* harmony import */ var _Tree__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Tree */ "./Source/Main/Tree.ts");
/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! chalk */ "./node_modules/chalk/source/index.js");
/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(chalk__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _Development__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Development */ "./Source/Main/Development/index.ts");
/* File:    MainWindow.ts
 * Author:  Gage Sorrell <gage@sorrell.sh>
 * License: MIT
 */









let MainWindow = undefined;
const GetLeastInvisiblePosition = () => {
    const Displays = electron__WEBPACK_IMPORTED_MODULE_2__.screen.getAllDisplays();
    const MonitorBounds = Displays.map((display) => {
        return {
            bottom: display.bounds.y + display.bounds.height,
            left: display.bounds.x,
            right: display.bounds.x + display.bounds.width,
            top: display.bounds.y
        };
    });
    MonitorBounds.sort((A, B) => A.left - B.left || A.top - B.top);
    const MaxRight = Math.max(...MonitorBounds.map((bounds) => bounds.right));
    const MaxBottom = Math.max(...MonitorBounds.map((bounds) => bounds.bottom));
    const InvisibleX = (MaxRight + 1) * 2;
    const InvisibleY = (MaxBottom + 1) * 2;
    return {
        x: InvisibleX,
        y: InvisibleY
    };
};
const LaunchMainWindow = async () => {
    console.log("Launching main window.");
    MainWindow = new electron__WEBPACK_IMPORTED_MODULE_2__.BrowserWindow({
        alwaysOnTop: true,
        frame: false,
        height: 900,
        show: true,
        skipTaskbar: true,
        title: "SorrellWm Main Window",
        titleBarStyle: "hidden",
        transparent: true,
        webPreferences: {
            devTools: false,
            // devTools: true,
            nodeIntegration: true,
            preload: electron__WEBPACK_IMPORTED_MODULE_2__.app.isPackaged
                ? path__WEBPACK_IMPORTED_MODULE_0__.join(__dirname, "Preload.js")
                : path__WEBPACK_IMPORTED_MODULE_0__.join(__dirname, "../../.erb/dll/preload.js")
        },
        width: 900,
        ...GetLeastInvisiblePosition()
    });
    MainWindow.on("show", (_Event, _IsAlwaysOnTop) => {
        MainWindow?.webContents.send("Navigate", "Main");
    });
    MainWindow.on("page-title-updated", (Event, _Title, _ExplicitSet) => {
        Event.preventDefault();
        // MainWindow?.webContents.openDevTools();
    });
    /** @TODO Find better place for this. */
    electron__WEBPACK_IMPORTED_MODULE_2__.ipcMain.on("GetAnnotatedPanels", async (_Event, ..._Arguments) => {
        const Panels = (0,_Tree__WEBPACK_IMPORTED_MODULE_6__.GetPanels)();
        const AnnotatedPanels = (await Promise.all(Panels.map(_Tree__WEBPACK_IMPORTED_MODULE_6__.AnnotatePanel)))
            .filter((Value) => {
            return Value !== undefined;
        });
        MainWindow?.webContents.send("GetAnnotatedPanels", AnnotatedPanels);
    });
    // Keyboard.Subscribe((Argument: FKeyboardEvent): void =>
    // {
    //     const InputKeys: Array<FVirtualKey> =
    //     [
    //         Vk["D"],
    //         Vk["H"],
    //         Vk["T"],
    //         Vk["N"],
    //         Vk["Z"],
    //         Vk["F"],
    //         Vk["G"],
    //         Vk["C"],
    //         Vk["R"],
    //         Vk["0"],
    //         Vk["1"],
    //         Vk["2"],
    //         Vk["3"],
    //         Vk["4"],
    //         Vk["5"],
    //         Vk["6"],
    //         Vk["7"],
    //         Vk["8"],
    //         Vk["9"]
    //     ];
    //     if (InputKeys.includes(Argument.VkCode) && Argument.State === "Up")
    //     {
    //         Log(`Logging input here as ${ Argument.VkCode }.`);
    //         MainWindow?.webContents.sendInputEvent({keyCode: KeyIdsById[Argument.VkCode], type: "keyDown"});
    //         MainWindow?.webContents.sendInputEvent({keyCode: KeyIdsById[Argument.VkCode], type: "char"});
    //         MainWindow?.webContents.sendInputEvent({keyCode: KeyIdsById[Argument.VkCode], type: "keyUp"});
    //     }
    // });
    /** @TODO Find better place for this. */
    electron__WEBPACK_IMPORTED_MODULE_2__.ipcMain.on("GetPanelScreenshots", async (_Event, ..._Arguments) => {
        const Panels = (0,_Tree__WEBPACK_IMPORTED_MODULE_6__.GetPanels)();
        const Screenshots = (await Promise.all(Panels.map(_Tree__WEBPACK_IMPORTED_MODULE_6__.GetPanelScreenshot)))
            .filter((Value) => {
            return Value !== undefined;
        });
        MainWindow?.webContents.send("GetPanelScreenshots", Screenshots);
    });
    electron__WEBPACK_IMPORTED_MODULE_2__.ipcMain.on("BringIntoPanel", async (_Event, ...Arguments) => {
        // Log("BringIntoPanel", Arguments[0]);
        console.log("BringIntoPanel !! !!", ...Arguments);
        (0,_Tree__WEBPACK_IMPORTED_MODULE_6__.BringIntoPanel)(Arguments[0]);
    });
    electron__WEBPACK_IMPORTED_MODULE_2__.ipcMain.on("Log", async (_Event, ...Arguments) => {
        const StringifiedArguments = Arguments
            .map((Argument) => {
            return typeof Argument === "string"
                ? Argument
                : JSON.stringify(Argument);
        })
            .join();
        const Birdie = chalk__WEBPACK_IMPORTED_MODULE_7___default().bgMagenta(" ⚛️ ") + " ";
        let OutString = Birdie;
        for (let Index = 0; Index < StringifiedArguments.length; Index++) {
            const Character = StringifiedArguments[Index];
            if (Character === "\n" && Index !== StringifiedArguments.length - 1) {
                OutString += Birdie + Character;
            }
            else {
                OutString += Character;
            }
        }
        console.log(OutString);
    });
    MainWindow.loadURL((0,_Core_Utility__WEBPACK_IMPORTED_MODULE_4__.ResolveHtmlPath)("index.html"));
};
function OnKey(Event) {
    const { State, VkCode } = Event;
    if (MainWindow === undefined) {
        return;
    }
    /** @TODO Make this a modifiable setting. */
    const ActivationKey = _Domain_Common_Component_Keyboard_Keyboard__WEBPACK_IMPORTED_MODULE_5__.Vk["+"];
    if (VkCode === ActivationKey) {
        if (State === "Down") {
            if ((0,_sorrellwm_windows__WEBPACK_IMPORTED_MODULE_1__.GetWindowTitle)((0,_sorrellwm_windows__WEBPACK_IMPORTED_MODULE_1__.GetFocusedWindow)()) !== "SorrellWm Main Window") {
                const IsTiled = (0,_Tree__WEBPACK_IMPORTED_MODULE_6__.IsWindowTiled)((0,_sorrellwm_windows__WEBPACK_IMPORTED_MODULE_1__.GetFocusedWindow)());
                (0,_Development__WEBPACK_IMPORTED_MODULE_8__.Log)(`Focused Window of IsTiled call is ${(0,_sorrellwm_windows__WEBPACK_IMPORTED_MODULE_1__.GetWindowTitle)((0,_sorrellwm_windows__WEBPACK_IMPORTED_MODULE_1__.GetFocusedWindow)())}.`);
                MainWindow.webContents.send("Navigate", "", { IsTiled });
                (0,_sorrellwm_windows__WEBPACK_IMPORTED_MODULE_1__.BlurBackground)();
            }
        }
        else {
            (0,_sorrellwm_windows__WEBPACK_IMPORTED_MODULE_1__.UnblurBackground)();
        }
    }
    else {
        MainWindow.webContents.send("Keyboard", Event);
    }
}
electron__WEBPACK_IMPORTED_MODULE_2__.app.whenReady()
    .then(LaunchMainWindow)
    .catch(console.log);
_Keyboard__WEBPACK_IMPORTED_MODULE_3__.Keyboard.Subscribe(OnKey);


/***/ })

};
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,