{"version":3,"file":"243.js","mappings":"8HAQO,SAASA,EAAgBC,EAAsBC,GASlD,MAAMC,EAAmB,UAAU,YAAaC,UAAW,eAAgBH,KAC3E,QAAkBI,IAAdH,EACJ,CAEI,OAAOC,EAD2B,cAAeD,GAErD,CAGI,OAAOC,CAEf,C,uFCbA,IAAIG,EAEJ,MAAMC,EAA4B,KAE9B,MAGMC,EAHoC,EAAAC,OAAOC,iBAGKC,KAAKC,IAEhD,CACHC,OAAQD,EAAQE,OAAOC,EAAIH,EAAQE,OAAOE,OAC1CC,KAAML,EAAQE,OAAOI,EACrBC,MAAOP,EAAQE,OAAOI,EAAIN,EAAQE,OAAOM,MACzCC,IAAKT,EAAQE,OAAOC,MAI5BP,EAAcc,MAAK,CAACC,EAAmBC,IAAsBD,EAAEN,KAAOO,EAAEP,MAAQM,EAAEF,IAAMG,EAAEH,MAQ1F,MAAO,CACHH,EAJwC,GAHnBO,KAAKC,OAAOlB,EAAcG,KAAKG,GAA2BA,EAAOK,SAGnD,GAKnCJ,EAJyC,GAHnBU,KAAKC,OAAOlB,EAAcG,KAAKG,GAA2BA,EAAOD,UAGnD,GAKvC,EA0HL,EAAAc,IAAIC,YACCC,MAxHoBC,UAErBC,QAAQC,IAAI,0BACZ1B,EAAa,IAAI,EAAA2B,cAAc,CAC3BC,aAAa,EACbC,OAAO,EACPnB,OAAQ,IACRoB,MAAM,EACNC,aAAa,EACbC,MAAO,wBACPC,cAAe,SACfC,aAAa,EACbC,eACA,CACIC,UAAU,EAEVC,iBAAiB,EACjBC,QAAS,EAAAjB,IAAIkB,WACP,OAAUzC,UAAW,cACrB,OAAUA,UAAW,8BAE/BgB,MAAO,OACJb,MAGPD,EAAWwC,GAAG,QAAQ,CAACC,EAAwBC,KAE3C1C,GAAY2C,YAAYC,KAAK,WAAY,OAAO,IAGpD5C,EAAWwC,GACP,sBACA,CAACK,EAAuBC,EAAgBC,KAEpCF,EAAMG,gBAAgB,IAK9B,EAAAC,QAAQT,GAAG,OAAOhB,MAAOiB,KAA2BS,KAEhD,MAAMC,EAA+BD,EAChC7C,KAAK+C,GAEyB,iBAAbA,EACRA,EACAC,KAAKC,UAAUF,KAExBG,OAGL,IAAIC,EADmB,MAEvB,IAAK,IAAIC,EAAgB,EAAGA,EAAQN,EAAqBO,OAAQD,IACjE,CACI,MAAME,EAAoBR,EAAqBM,GAC7B,OAAdE,GAAsBF,IAAUN,EAAqBO,OAAS,EAE9DF,GAPe,MAOOG,EAItBH,GAAaG,CAErB,CAEAlC,QAAQC,IAAI8B,EAAU,IAG1BxD,EAAW4D,SAAQ,OAAgB,cAAc,IAqDhDC,MAAMpC,QAAQC,KAEnB,IAASoC,WApDT,SAAejB,GAEX,MAAM,MAAEkB,EAAK,OAAEC,GAAWnB,EAC1B,QAAmB9C,IAAfC,EAEA,OAMAgE,IAF+B,EAAAC,GAAG,KAIpB,SAAVF,GAGA,IAAAG,mBAKA,IAAAC,oBAuBJnE,EAAW2C,YAAYC,KAAK,WAAYC,EAEhD,G","sources":["webpack://SorrellWm/./Source/Main/Core/Utility.ts","webpack://SorrellWm/./Source/Main/MainWindow.ts"],"sourcesContent":["/* File:    util.ts\n * Author:  Gage Sorrell <gage@sorrell.sh>\n * License: MIT\n */\n\nimport { URL } from \"url\";\nimport path from \"path\";\n\nexport function ResolveHtmlPath(HtmlFileName: string, Component?: string)\n{\n    if (process.env.NODE_ENV === \"development\")\n    {\n        const Port: string | number = process.env.PORT || 1212;\n        const Url: URL = new URL(`http://localhost:${ Port }`);\n        Url.pathname = HtmlFileName;\n        return Url.href;\n    }\n    const BasePath: string = `file://${path.resolve(__dirname, \"../Renderer/\", HtmlFileName)}`;\n    if (Component !== undefined)\n    {\n        const ComponentArgument: string = `?Component=${ Component }`;\n        return BasePath + ComponentArgument;\n    }\n    else\n    {\n        return BasePath;\n    }\n}\n","/* File:    MainWindow.ts\n * Author:  Gage Sorrell <gage@sorrell.sh>\n * License: MIT\n */\n\nimport * as Path from \"path\";\nimport { BlurBackground, UnblurBackground } from \"@sorrellwm/windows\";\nimport { BrowserWindow, app, ipcMain, screen } from \"electron\";\nimport type { FKeyboardEvent } from \"./Keyboard.Types\";\nimport type { FVirtualKey } from \"@/Domain/Common/Component/Keyboard/Keyboard.Types\";\nimport { Keyboard } from \"./Keyboard\";\nimport { Vk } from \"@/Domain/Common/Component/Keyboard/Keyboard\";\nimport { ResolveHtmlPath } from \"./Core/Utility\";\n\nlet MainWindow: BrowserWindow | undefined = undefined;\n\nconst GetLeastInvisiblePosition = (): { x: number; y: number } =>\n{\n    const Displays: Array<Electron.Display> = screen.getAllDisplays();\n\n    type FMonitorBounds = { left: number; right: number; top: number; bottom: number };\n    const MonitorBounds: Array<FMonitorBounds> = Displays.map((display: Electron.Display): FMonitorBounds =>\n    {\n        return {\n            bottom: display.bounds.y + display.bounds.height,\n            left: display.bounds.x,\n            right: display.bounds.x + display.bounds.width,\n            top: display.bounds.y\n        };\n    });\n\n    MonitorBounds.sort((A: FMonitorBounds, B: FMonitorBounds) => A.left - B.left || A.top - B.top);\n\n    const MaxRight: number = Math.max(...MonitorBounds.map((bounds: FMonitorBounds) => bounds.right));\n    const MaxBottom: number = Math.max(...MonitorBounds.map((bounds: FMonitorBounds) => bounds.bottom));\n\n    const InvisibleX: number = (MaxRight + 1) * 2;\n    const InvisibleY: number = (MaxBottom + 1) * 2;\n\n    return {\n        x: InvisibleX,\n        y: InvisibleY\n    };\n};\n\nconst LaunchMainWindow = async (): Promise<void> =>\n{\n    console.log(\"Launching main window.\");\n    MainWindow = new BrowserWindow({\n        alwaysOnTop: true,\n        frame: false,\n        height: 900,\n        show: true,\n        skipTaskbar: true,\n        title: \"SorrellWm Main Window\",\n        titleBarStyle: \"hidden\",\n        transparent: true,\n        webPreferences:\n        {\n            devTools: false,\n            // devTools: true,\n            nodeIntegration: true,\n            preload: app.isPackaged\n                ? Path.join(__dirname, \"Preload.js\")\n                : Path.join(__dirname, \"../../.erb/dll/preload.js\")\n        },\n        width: 900,\n        ...GetLeastInvisiblePosition()\n    });\n\n    MainWindow.on(\"show\", (_Event: Electron.Event, _IsAlwaysOnTop: boolean): void =>\n    {\n        MainWindow?.webContents.send(\"Navigate\", \"Main\");\n    });\n\n    MainWindow.on(\n        \"page-title-updated\",\n        (Event: Electron.Event, _Title: string, _ExplicitSet: boolean): void =>\n        {\n            Event.preventDefault();\n            // MainWindow?.webContents.openDevTools();\n        }\n    );\n\n    ipcMain.on(\"Log\", async (_Event: Electron.Event, ...Arguments: Array<unknown>) =>\n    {\n        const StringifiedArguments: string = Arguments\n            .map((Argument: unknown): string =>\n            {\n                return typeof Argument === \"string\"\n                    ? Argument\n                    : JSON.stringify(Argument);\n            })\n            .join();\n\n        const Birdie: string = \"üê• \";\n        let OutString: string = Birdie;\n        for (let Index: number = 0; Index < StringifiedArguments.length; Index++)\n        {\n            const Character: string = StringifiedArguments[Index];\n            if (Character === \"\\n\" && Index !== StringifiedArguments.length - 1)\n            {\n                OutString += Birdie + Character;\n            }\n            else\n            {\n                OutString += Character;\n            }\n        }\n\n        console.log(OutString);\n    });\n\n    MainWindow.loadURL(ResolveHtmlPath(\"index.html\"));\n};\n\nfunction OnKey(Event: FKeyboardEvent): void\n{\n    const { State, VkCode } = Event;\n    if (MainWindow === undefined)\n    {\n        return;\n    }\n\n    /** @TODO Make this a modifiable setting. */\n    const ActivationKey: FVirtualKey = Vk[\"+\"];\n\n    if (VkCode === ActivationKey)\n    {\n        if (State === \"Down\")\n        {\n            // const { CoveringWindow, ThemeMode }: FBlurReturnType = MyBlur();\n            BlurBackground();\n        }\n        else\n        {\n            // MainWindow?.webContents.send(\"TearDown\");\n            UnblurBackground();\n            // ipcMain.on(\"TearDown\", (): void =>\n            // {\n            //     TearDown();\n            //     setTimeout((): void =>\n            //     {\n            //         const { x, y } = GetLeastInvisiblePosition();\n            //         MainWindow?.setPosition(x, y, false);\n            //     }, 100);\n            // });\n            // MainWindow?.webContents.send(\"TearDown\");\n\n            // MainWindow?.on(\"closed\", (_: Electron.Event): void =>\n            // {\n            //     LaunchMainWindow();\n            // });\n            // MainWindow?.close();\n\n            // TestFun();\n        }\n    }\n    else\n    {\n        MainWindow.webContents.send(\"Keyboard\", Event);\n    }\n}\n\napp.whenReady()\n    .then(LaunchMainWindow)\n    .catch(console.log);\n\nKeyboard.Subscribe(OnKey);\n"],"names":["ResolveHtmlPath","HtmlFileName","Component","BasePath","__dirname","undefined","MainWindow","GetLeastInvisiblePosition","MonitorBounds","screen","getAllDisplays","map","display","bottom","bounds","y","height","left","x","right","width","top","sort","A","B","Math","max","app","whenReady","then","async","console","log","BrowserWindow","alwaysOnTop","frame","show","skipTaskbar","title","titleBarStyle","transparent","webPreferences","devTools","nodeIntegration","preload","isPackaged","on","_Event","_IsAlwaysOnTop","webContents","send","Event","_Title","_ExplicitSet","preventDefault","ipcMain","Arguments","StringifiedArguments","Argument","JSON","stringify","join","OutString","Index","length","Character","loadURL","catch","Subscribe","State","VkCode","Vk","BlurBackground","UnblurBackground"],"sourceRoot":""}