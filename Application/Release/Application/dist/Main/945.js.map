{"version":3,"file":"945.js","mappings":"2DAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,CACP,CACAF,EAAoBK,KAAO,IAAM,GACjCL,EAAoBM,QAAUN,EAC9BA,EAAoBO,GAAK,KACzBC,EAAOC,QAAUT,C,2GCIjB,IAAIU,EAAmC,KAKL,EAAQ,MACrBC,UAGrB,MAAMC,GACsC,EAQ5C,MAeMC,EAAeC,UAOjB,MAAMC,EAAwB,EAAAC,IAAIC,WAC5B,SAAUC,QAAQC,cAAe,YACjC,SAAUC,UAAW,kBAO3BV,EAAa,IAAI,EAAAW,cAAc,CAC3BC,OAAQ,IACRC,MAAO,KAEPC,OAAO,EACPC,KAViB,KAAIC,IAEd,SAAUX,KAAkBW,GAQ7BC,CAAa,YACnBC,MAAM,EACNC,aAAa,EACbC,eACA,CACIC,UAAU,EACVC,QAAS,EAAAhB,IAAIC,WACP,SAAUG,UAAW,cACrB,SAAUA,UAAW,gCAInCV,EAAWuB,SAAQ,OAAgB,eAEnCvB,EAAWwB,GAAG,QAAQ,CAACC,EAAwBC,KAE3CC,YAAW,KAEP3B,GAAY4B,YAAYC,KAAK,WAAY,aAAa,GACvD,IAAK,IAGZ7B,EAAWwB,GAAG,iBAAiB,KAE3B,IAAKxB,EAED,MAAM,IAAIP,MAAM,+BAQhBO,EAAW8B,sBAAqB,GAChC9B,EAAWkB,MACf,IAGJlB,EAAWwB,GAAG,UAAU,KAEpBxB,EAAa,IAAI,IAGrBA,EAAW4B,YAAYG,sBAAsBC,IAEzC,EAAAC,MAAMC,aAAaF,EAAMG,KAClB,CAAEC,OAAQ,WAGrB,eAAeC,KAAKC,MAAQ,OAC5B,EAAAC,YAAYC,OAAS,IACrB,EAAAD,YAAYE,0BAA0B,EAG1C,EAAAnC,IAAIkB,GAAG,qBAAqB,KAEC,WAArBhB,QAAQkC,UAER,EAAApC,IAAIqC,MACR,IAGJ,EAAArC,IAAIsC,YACCC,MAAK,KAEF1C,IACA,EAAAG,IAAIkB,GAAG,YAAY,KAEI,OAAfxB,GAEAG,GACJ,GACF,IAEL2C,MAAMC,QAAQC,I,8ECrIZ,SAASC,EAAgBC,EAAsBC,GASlD,MAAMC,EAAmB,UAAU,YAAa1C,UAAW,eAAgBwC,KAC3E,QAAkBG,IAAdF,EACJ,CAEI,OAAOC,EAD2B,cAAeD,GAErD,CAGI,OAAOC,CAEf,C","sources":["webpack://SorrellWm/./node_modules/electron-debug/ sync","webpack://SorrellWm/./Source/Main/Core/Initialization.ts","webpack://SorrellWm/./Source/Main/Core/Utility.ts"],"sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 2408;\nmodule.exports = webpackEmptyContext;","/* File:      Initialization.ts\n * Author:    Gage Sorrell <gage@sorrell.sh>\n * Copyright: (c) 2025 Sorrell Intellectual Properties\n * License:   MIT\n */\n\nimport { BrowserWindow, app, shell } from \"electron\";\nimport { autoUpdater } from \"electron-updater\";\nimport log from \"electron-log\";\nimport path from \"path\";\nimport { ResolveHtmlPath } from \"./Utility\";\n\nlet MainWindow: BrowserWindow | null = null;\n\nif (process.env.NODE_ENV === \"production\")\n{\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-require-imports */\n    const SourceMapSupport: any = require(\"source-map-support\");\n    SourceMapSupport.install();\n}\n\nconst IsDebug: boolean =\n  process.env.NODE_ENV === \"development\" || process.env.DEBUG_PROD === \"true\";\n\nif (IsDebug)\n{\n    /* eslint-disable-next-line @typescript-eslint/no-require-imports */\n    require(\"electron-debug\")();\n}\n\nconst installExtensions = async () =>\n{\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-require-imports */\n    const Installer: any = require(\"electron-devtools-installer\");\n    const ForceDownload: boolean = !!process.env.UPGRADE_EXTENSIONS;\n    const Extensions: Array<string> = [ \"REACT_DEVELOPER_TOOLS\" ];\n\n    return Installer\n        .default(\n            Extensions.map((Name: string) => Installer[Name]),\n            ForceDownload\n        )\n        .catch(console.log);\n};\n\nconst CreateWindow = async () =>\n{\n    if (IsDebug)\n    {\n        await installExtensions();\n    }\n\n    const ResourcesPath: string = app.isPackaged\n        ? path.join(process.resourcesPath, \"Resource\")\n        : path.join(__dirname, \"../../Resource\");\n\n    const getAssetPath = (...paths: Array<string>): string =>\n    {\n        return path.join(ResourcesPath, ...paths);\n    };\n\n    MainWindow = new BrowserWindow({\n        height: 728,\n        width: 1024,\n\n        frame: false,\n        icon: getAssetPath(\"icon.png\"),\n        show: false,\n        transparent: true,\n        webPreferences:\n        {\n            devTools: true,\n            preload: app.isPackaged\n                ? path.join(__dirname, \"preload.js\")\n                : path.join(__dirname, \"../../.erb/dll/preload.js\")\n        }\n    });\n\n    MainWindow.loadURL(ResolveHtmlPath(\"index.html\"));\n\n    MainWindow.on(\"show\", (_Event: Electron.Event, _IsAlwaysOnTop: boolean): void =>\n    {\n        setTimeout((): void =>\n        {\n            MainWindow?.webContents.send(\"Navigate\", \"TestWindow\");\n        }, 2000);\n    });\n\n    MainWindow.on(\"ready-to-show\", () =>\n    {\n        if (!MainWindow)\n        {\n            throw new Error(\"\\\"MainWindow\\\" is not defined\");\n        }\n        if (process.env.START_MINIMIZED)\n        {\n            MainWindow.minimize();\n        }\n        else\n        {\n            MainWindow.setMenuBarVisibility(false);\n            MainWindow.show();\n        }\n    });\n\n    MainWindow.on(\"closed\", () =>\n    {\n        MainWindow = null;\n    });\n\n    MainWindow.webContents.setWindowOpenHandler((Edata: Electron.HandlerDetails) =>\n    {\n        shell.openExternal(Edata.url);\n        return { action: \"deny\" };\n    });\n\n    log.transports.file.level = \"info\";\n    autoUpdater.logger = log;\n    autoUpdater.checkForUpdatesAndNotify();\n};\n\napp.on(\"window-all-closed\", () =>\n{\n    if (process.platform !== \"darwin\")\n    {\n        app.quit();\n    }\n});\n\napp.whenReady()\n    .then(() =>\n    {\n        CreateWindow();\n        app.on(\"activate\", () =>\n        {\n            if (MainWindow === null)\n            {\n                CreateWindow();\n            }\n        });\n    })\n    .catch(console.log);\n","/* File:    util.ts\n * Author:  Gage Sorrell <gage@sorrell.sh>\n * License: MIT\n */\n\nimport { URL } from \"url\";\nimport path from \"path\";\n\nexport function ResolveHtmlPath(HtmlFileName: string, Component?: string)\n{\n    if (process.env.NODE_ENV === \"development\")\n    {\n        const Port: string | number = process.env.PORT || 1212;\n        const Url: URL = new URL(`http://localhost:${ Port }`);\n        Url.pathname = HtmlFileName;\n        return Url.href;\n    }\n    const BasePath: string = `file://${path.resolve(__dirname, \"../Renderer/\", HtmlFileName)}`;\n    if (Component !== undefined)\n    {\n        const ComponentArgument: string = `?Component=${ Component }`;\n        return BasePath + ComponentArgument;\n    }\n    else\n    {\n        return BasePath;\n    }\n}\n"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","id","module","exports","MainWindow","install","IsDebug","CreateWindow","async","ResourcesPath","app","isPackaged","process","resourcesPath","__dirname","BrowserWindow","height","width","frame","icon","paths","getAssetPath","show","transparent","webPreferences","devTools","preload","loadURL","on","_Event","_IsAlwaysOnTop","setTimeout","webContents","send","setMenuBarVisibility","setWindowOpenHandler","Edata","shell","openExternal","url","action","file","level","autoUpdater","logger","checkForUpdatesAndNotify","platform","quit","whenReady","then","catch","console","log","ResolveHtmlPath","HtmlFileName","Component","BasePath","undefined"],"sourceRoot":""}