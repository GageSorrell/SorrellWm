{"version":3,"file":"preload.js","mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,QAAQ,I,mBCTX,MAAM,EAA+BC,QAAQ,YCWvCC,EACN,CACIC,YACA,CACI,EAAAC,CAAGC,EAAiBC,GAEhB,MAAMC,EAAe,CAACC,KAA6BC,IAExCH,KAAcG,GAKzB,OAFA,EAAAN,YAAYC,GAAGC,EAASE,GAEjB,KAEH,EAAAJ,YAAYO,eAAeL,EAASE,EAAa,CAEzD,EACA,IAAAI,CAAKN,EAAiBC,GAElB,EAAAH,YAAYQ,KACRN,GACA,CAACO,KAA2BC,IAA+BP,KAAcO,IAEjF,EACA,WAAAC,CAAYT,KAAoBU,GAE5B,EAAAZ,YAAYa,KAAKX,KAAYU,EACjC,GAEJE,iBAAkBC,SAA8B,EAAAf,YAAYgB,OAAO,oBACvEC,eAAgBF,SAA8B,EAAAf,YAAYgB,OAAO,kBACjEE,cAAeH,SAAgC,EAAAf,YAAYgB,OAAO,kB,OAGlE,EAAAG,cAAcC,kBAAkB,WAAYrB,G","sources":["webpack://SorrellWm/webpack/universalModuleDefinition","webpack://SorrellWm/external node-commonjs \"electron\"","webpack://SorrellWm/./Source/Main/Core/Preload.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","/* File:    Preload.ts\n * Author:  Gage Sorrell <gage@sorrell.sh>\n * License: MIT\n */\n\n/* eslint-disable */\n\nimport { type IpcRendererEvent, contextBridge, ipcRenderer } from \"electron\";\nimport { GetFocusedWindow, GetIsLightMode, GetThemeColor, HWindow,FHexColor } from \"@sorrellwm/windows\";\n\n\nconst ElectronHandler =\n{\n    ipcRenderer:\n    {\n        on(Channel: string, InFunction: ((...Arguments: Array<unknown>) => void))\n        {\n            const subscription = (_event: IpcRendererEvent, ...args: Array<unknown>) =>\n            {\n                return InFunction(...args);\n            };\n\n            ipcRenderer.on(Channel, subscription);\n\n            return () =>\n            {\n                ipcRenderer.removeListener(Channel, subscription);\n            };\n        },\n        once(Channel: string, InFunction: ((...Arguments: Array<unknown>) => void))\n        {\n            ipcRenderer.once(\n                Channel,\n                (_Event: Electron.Event, ..._Arguments: Array<unknown>) => InFunction(..._Arguments)\n            );\n        },\n        sendMessage(Channel: string, ...Arguments: Array<unknown>)\n        {\n            ipcRenderer.send(Channel, ...Arguments);\n        }\n    },\n    GetFocusedWindow: async (): Promise<HWindow> => ipcRenderer.invoke(\"GetFocusedWindow\"),\nGetIsLightMode: async (): Promise<boolean> => ipcRenderer.invoke(\"GetIsLightMode\"),\nGetThemeColor: async (): Promise<FHexColor> => ipcRenderer.invoke(\"GetThemeColor\")\n};\n\ncontextBridge.exposeInMainWorld(\"electron\", ElectronHandler);\n\nexport type FElectronHandler = typeof ElectronHandler;\n\n\n"],"names":["root","factory","exports","module","define","amd","a","i","global","require","ElectronHandler","ipcRenderer","on","Channel","InFunction","subscription","_event","args","removeListener","once","_Event","_Arguments","sendMessage","Arguments","send","GetFocusedWindow","async","invoke","GetIsLightMode","GetThemeColor","contextBridge","exposeInMainWorld"],"sourceRoot":""}