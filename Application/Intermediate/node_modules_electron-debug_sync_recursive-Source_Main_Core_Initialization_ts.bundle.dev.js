exports.id = "node_modules_electron-debug_sync_recursive-Source_Main_Core_Initialization_ts";
exports.ids = ["node_modules_electron-debug_sync_recursive-Source_Main_Core_Initialization_ts"];
exports.modules = {

/***/ "./node_modules/electron-debug sync recursive":
/*!*******************************************!*\
  !*** ./node_modules/electron-debug/ sync ***!
  \*******************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "./node_modules/electron-debug sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "./Source/Main/Core/Initialization.ts":
/*!********************************************!*\
  !*** ./Source/Main/Core/Initialization.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! electron */ "electron");
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Utility_Utility__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utility/Utility */ "./Source/Main/Utility/Utility.ts");
/* harmony import */ var electron_updater__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! electron-updater */ "./node_modules/electron-updater/out/main.js");
/* harmony import */ var electron_log__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! electron-log */ "./node_modules/electron-log/src/index.js");
/* harmony import */ var electron_log__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(electron_log__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _BrowserWindow__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! #/BrowserWindow */ "./Source/Main/BrowserWindow.ts");
/* File:      Initialization.ts
 * Author:    Gage Sorrell <gage@sorrell.sh>
 * Copyright: (c) 2025 Gage Sorrell
 * License:   MIT
 */





let MainWindow = null;
if (false) {}
const IsDebug =  true || 0;
if (IsDebug) {
    /* eslint-disable-next-line @typescript-eslint/no-require-imports */
    __webpack_require__(/*! electron-debug */ "./node_modules/electron-debug/index.js")();
}
const installExtensions = async () => {
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-require-imports */
    const Installer = __webpack_require__(/*! electron-devtools-installer */ "./node_modules/electron-devtools-installer/dist/index.js");
    const ForceDownload = !!process.env.UPGRADE_EXTENSIONS;
    const Extensions = ["REACT_DEVELOPER_TOOLS"];
    return Installer
        .default(Extensions.map((Name) => Installer[Name]), ForceDownload)
        .catch(console.log);
};
const CreateWindow = async () => {
    if (IsDebug) {
        await installExtensions();
    }
    MainWindow = (0,_BrowserWindow__WEBPACK_IMPORTED_MODULE_4__.CreateBrowserWindow)({
        height: 728,
        width: 1024,
        show: false
    });
    MainWindow.loadURL((0,_Utility_Utility__WEBPACK_IMPORTED_MODULE_1__.ResolveHtmlPath)("index.html"));
    MainWindow.on("show", (_Event, _IsAlwaysOnTop) => {
        setTimeout(() => {
            MainWindow?.webContents.send("Navigate", "TestWindow");
        }, 2000);
    });
    MainWindow.on("ready-to-show", () => {
        if (!MainWindow) {
            throw new Error("\"MainWindow\" is not defined");
        }
        if (process.env.START_MINIMIZED) {
            MainWindow.minimize();
        }
        else {
            MainWindow.setMenuBarVisibility(false);
            MainWindow.show();
        }
    });
    MainWindow.on("closed", () => {
        MainWindow = null;
    });
    MainWindow.webContents.setWindowOpenHandler((Edata) => {
        electron__WEBPACK_IMPORTED_MODULE_0__.shell.openExternal(Edata.url);
        return { action: "deny" };
    });
    (electron_log__WEBPACK_IMPORTED_MODULE_3___default().transports).file.level = "info";
    electron_updater__WEBPACK_IMPORTED_MODULE_2__.autoUpdater.logger = (electron_log__WEBPACK_IMPORTED_MODULE_3___default());
    electron_updater__WEBPACK_IMPORTED_MODULE_2__.autoUpdater.checkForUpdatesAndNotify();
};
electron__WEBPACK_IMPORTED_MODULE_0__.app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
        electron__WEBPACK_IMPORTED_MODULE_0__.app.quit();
    }
});
electron__WEBPACK_IMPORTED_MODULE_0__.app.whenReady()
    .then(() => {
    CreateWindow();
    electron__WEBPACK_IMPORTED_MODULE_0__.app.on("activate", () => {
        if (MainWindow === null) {
            CreateWindow();
        }
    });
})
    .catch(console.log);


/***/ })

};
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,